<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preetsuthar.me</title>
        <link>https://preetsuthar.me</link>
        <description>Welcome to my personal blogging website!</description>
        <lastBuildDate>Thu, 01 Feb 2024 07:26:51 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <atom:link href="https://preetsuthar.me/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Add comments to blog website in minutes]]></title>
            <link>https://preetsuthar.me/posts/add-comments-to-blog-website-in-minutes</link>
            <guid>https://preetsuthar.me/posts/add-comments-to-blog-website-in-minutes</guid>
            <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Introduction

When creating blog website you really want to add comments in your website but adding comments system in blog website requiers some big brain üß† complex logic and also requires database system which will make you go broke in no time!

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmpng3j0il4putn4ch7m.png)

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dsvk56er502eq4wjpuv.png)

Fortunatly we have free, lightweight and efficient options to add comments in blog website or any website. I am talking about [utteranc.es](https://utteranc.es/). A lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more!

Utteranc is open-source with theming option and awesome thing is it doesn't have any ads or anything. It is completely free to use and takes minutes to set up.

So enough Introduction, Let's get started!

## How it works?

Well you must be thinking how this works like it requires no database nothing and even sets up in mintues how is possible? It's possible cause Utteranc uses github issues as database I mean not database but "So called database" to store the comments by user

> When Utterances loads, the GitHub issue search API is used to find the issue associated with the age based on url, pathname or title. If we cannot find an issue that matches the page, no problem, utterances-bot will automatically create an issue the first time someone comments.
> To comment, users must authorize the utterances app to post on their behalf using the GitHub OAuth flow. Alternatively, users can comment on the GitHub issue directly.

## Setup

Let's do some setup on github now.

1. Create GitHub account
   First step is to have GitHub account. If you already have one then login into the account and if not then create new account

2. Create empty repository
   Done creating account? Great! Now we'll create empty repository to store the comments.

On top-right corner you'll see `plus` icon click on that and create new repository.

![Plus icon](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g18pcrrx142lpxiteh46.png)
![New repository](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w81xv0opc5r3xqz5iwft.png)

Create new repository with name `comments`

![Comments](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syinx7w3ahmf1ps47dq0.png)

> Make sure that repository is public and also it doesn't have any files.

![Empty](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akt53ajnwfekfo3bqhm3.png)

Click `Create repository` to create the repository.

![Create repository](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ui8bue5mazjuyctd3sr.png)

> Your repository shouldn't have any files!

![Empty Repo](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgs6yfg9gystvhvca1dp.png)

## Coding time

well 80% work done now we just need to add code to add comments in website.

```javascript
<script
  src="https://utteranc.es/client.js"
  repo="preetsuthar17/comments"
  issue-term="pathname"
  label="üåüüíñ‚ú®"
  theme="github-dark"
  crossorigin="anonymous"
  async
></script>
```

> You have to update some values here.
> Make sure to replace `repo="preetsuthar17/comments"` this with your own github user name `repo="yourUserName/comments"`

You can also change the `theme="github-dark"` to `theme="github-light"`

This is the code you need to put where you want to add comment div. If you want to add comments at the
last of blog page put this code at the last in the code file.

And we're done! We successfully added comments to our website.

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li03zzwm9j9j9ji7qhiv.png)

> Check out the demo [here](https://preetsuthar.me/posts/add-comments-to-blog-website-in-minutes)
> Note: make sure your `comments` repo is public and doesn't contain any sorta file`

So that's it for this blog! Thanks for reading!
]]></description>
        </item>
        <item>
            <title><![CDATA[Adding a Mesmerizing Tilt Effect to Your Website with Tilt.js [Repost]]]></title>
            <link>https://preetsuthar.me/posts/adding-a-mesmerizing-tilt-effect-to-your-website-with-tilt-js-repost</link>
            <guid>https://preetsuthar.me/posts/adding-a-mesmerizing-tilt-effect-to-your-website-with-tilt-js-repost</guid>
            <pubDate>Tue, 04 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
In web design, adding subtle interactive effects can greatly improve the user experience. One popular effect that has gained attention recently is the tilt effect, which creates a dynamic and immersive visual experience in response to mouse movements. In this blog post, we'll explore how you can easily apply a tilt effect to your website using the Tilt.js library.

### Getting Started

To begin, First make sure you have the Tilt.js library installed. You can include it in your project by adding the following script tag to your HTML file's `<head>` section:

```html
<script src="https://cdn.jsdelivr.net/npm/vanilla-tilt@1.7.0/dist/vanilla-tilt.min.js"></script>
```

### The Code

Now that we have the library included, let's dive into the code. Here's the code snippet you can use to implement the tilt effect on an element:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Your head content goes here -->
  </head>
  <body>
    <div class="flex-container">
      <a
        data-tilt
        data-tilt-glare="true"
        data-tilt-transition="true"
        data-tilt-scale="1.1"
        class="c-logo"
        href=""
        title="Tilt.js demo"
      >
        Hello üëãüèª
      </a>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const tiltElement = document.querySelector(".c-logo");
        VanillaTilt.init(tiltElement, {
          max: 25,
          speed: 10,
          glare: true,
          "max-glare": 0.4,
        });
      });
    </script>
  </body>
</html>
```

### Explanation of the code

Let's go through the code step by step to understand how the tilt effect is implemented:

1. First, we have an HTML structure that contains a `<div>` with a nested `<a>` element. The `<a>` element represents the element that will have the tilt effect applied to it. You can modify this structure according to your needs.

2. The `<a>` element has various `data-tilt` attributes that control the behavior of the tilt effect. For example, `data-tilt-glare="true"` adds a subtle glare effect, `data-tilt-transition="true"` enables smooth transitions, and `data-tilt-scale="1.1"` sets the maximum scale for the tilt effect.

3. Inside the `<script>` tag, we add an event listener for the "DOMContentLoaded" event. This ensures that the Javascript code is executed after the HTML content has been loaded.

4. Within the event listener, we select the tilt element using `document.querySelector('.c-logo')`. You can modify the selector to target your desired element.

5. Finally, we initialize the tilt effect using `VanillaTilt.init(tiltElement, options)`. The `tiltElement` variable represents the element we selected earlier, and `options` is an object that allows you to customize the tilt effect's parameters. In this example, we set the maximum tilt angle to 25 degrees, the tilt speed to 10, enable glare with a maximum opacity of 0.4, and more.

### Style code

You can style an element with a gradient effect using CSS. Here is an example of CSS code used in HTML:

```css
@import url("https://fonts.googleapis.com/css?family=Fira+Sans:300,400,500,600,700");
@import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");

* {
  box-sizing: border-box;
}

body {
  font-family: "Poppins", sans-serif;
  background: #e7e7e7;
  margin-top: 5%;
}

.flex-container,
.c-logo {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
  align-content: stretch;
  align-items: center;
}

.c-logo {
  width: 500px;
  height: 500px;
  background-color: #7e56ff;
  background-image: linear-gradient(
    150deg,
    #5a00ff 0%,
    #ff1ff7 100%,
    #ff1ff7 100%
  );
  box-shadow: 0 20px 27px rgba(0, 0, 0, 0.05);
  color: white;
  text-decoration: none;
  border-radius: 10px;
  font-size: 4em;
  font-weight: 300;
  transform-style: preserve-3d;
  transform: perspective(500px);
  box-shadow: 0 20px 70px -10px rgba(0, 0, 0, 0.7), 0 50px 100px 0 rgba(0, 0, 0, 0.2);
}

.c-logo > span {
  display: block;
  transform: translateZ(50px) scale(0.6);
  text-shadow: -2px -1px 2px rgba(150, 150, 150, 1);
  font-weight: 600 !important;
}

.c-logo:hover:after {
  transform: translateZ(-100px);
}
```

> Demo of this library [here](https://tiltjs-demo.vercel.app/)

### Conclusion

The Tilt.js library allows you to easily add a tilt effect to website elements, providing users with an immersive and interactive experience. The library offers a variety of configuration options that allow you to tailor the effect to your design preferences. Experiment with different settings and styles to create visually stunning gradient effects that enhance the overall aesthetic of your website.
]]></description>
        </item>
        <item>
            <title><![CDATA[Beautiful background animation only with HTML and CSS]]></title>
            <link>https://preetsuthar.me/posts/beautiful-background-animation-only-with-html-and-css</link>
            <guid>https://preetsuthar.me/posts/beautiful-background-animation-only-with-html-and-css</guid>
            <pubDate>Sun, 20 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Preview

Have you ever wondered how people create those beautiful background shapes that are animated? Well, it is much easier than you think let's have a look at what I am talking about,

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6bx6e8g6zmfy8j15v6e.png)

You see these look so beautiful in websites, making them look more eye-catching. They are animated so it's so cool!! isn't it?

Let's create it then :)

## Get started

First of all head over to [this website](https://bgjar.com/animated-shape)

![bgjar.com](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gohe7y4flhjbfbqr1u3.png)

You'll see something like this hover mouse over `Animated shapes` and then click on `Customize`

![Animated Shapes -> Customize](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bhxvikfp3igy4xj307x.png)

Now simply customize it as you wish to and don't forget to tick the `enable animations` option :)

Once you are done click on `get code` at the bottom and copy the SVG code

![Get SVG code](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ew3npiw1so98w3whhyd.png)

## Coding Time :)

Once you copy the SVG code headover to your website code folder create a new file `nameOfTheFile.svg` you can name it whatever you want but don't forget to put `.svg` extension. Now in the same file paste the SVG code you copied!

Now head over to your main CSS file, In this file we'll set the background for the body.

`main.css`

```css
background-image: url("/path/to/your/image.svg");
background-repeat: no-repeat;
background-size: cover;
```

And voila!! we're done!! enjoy some beautiful eye-catching animations in the body's background
]]></description>
        </item>
        <item>
            <title><![CDATA[Code Syntax highlighting in Next Js]]></title>
            <link>https://preetsuthar.me/posts/code-syntax-highlighting-in-next-js</link>
            <guid>https://preetsuthar.me/posts/code-syntax-highlighting-in-next-js</guid>
            <pubDate>Sat, 13 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
If you're running blog page or website you know that adding syntax highlighting can be very tough and complex process. but fortunately I have found a way to add syntax highlighting in your `next js` blog website.

To add syntax highlighting in next js website we are gonna use library called `highlightjs`. This library supports ton of languages and themes for customizing as per your needs.

Let's get started by installing the [highlight js](https://highlightjs.org/)

## Setup

we can use yarn or npm to install this package.

```shell
npm install highlight.js
# or
yarn add highlight.js
```

After installation we import this package in our file. For me I'm gonna be using `[slug].js` which is basically dynamic page for blog posts.

```javascript
import hljs from "highlight.js/lib/core";
```

Now we will need to import some of the required files for this package using `<script/>` tag but since we're using next js we're gonna use `next/script`.

```javascript
import Script from "next/script";
```

Now to use this feature we have to enable experimental feature in our next config file.

`next.config.js`

```javascript
module.exports = {
  experimental: {
    nextScriptWorkers: true,
  },
};
```

We're done with config file. Now we head back to our `[slug].js` file and start using `<Script/>` tag

```javascript
import Script from "next/script";

const post = ({ post }) => {
  return (
    <>
      <div>{/*Post content goes here*/}</div>
    </>
  );
};
```

This is our basic setup now let's import `highlight.js` file using our `<Script/>` tag

## Importing highlight.js

```javascript
import Script from "next/script";

const post = ({ post }) => {
  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};
```

## Importing stylesheet for highlighting

Now after importing `highlight.js` library we'll need to import stylesheet for highlighting. In our next js project we have a file `_document.js` we'll import this stylesheet in that page.

```javascript
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
```

This is my `_document.js`, yours can be different depends on the project. We import the stylesheet inside the `Head` tag which is basically replacement of default `<head/>` to `<Head/>` by next js.

```javascript
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/tokyo-night-dark.min.css"
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
```

Here I have imported the stylesheet inside the `Head` tag. You can find large collection of these stylesheet [here](https://cdnjs.com/libraries/highlight.js). Just select the Asset type to `Styling` and keep experimenting with theme until you find the right one.

![CDN for themes](https://i.imgur.com/p4TF3XP.png)

We're done with the `_document.js` file. let's head back to `[slug].js` and finish the final process.

Now to enable syntax highlighting for various languages we need to register those languages.

`[slug].js`

```javascript
import Script from "next/script";

const post = ({ post }) => {
  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};
```

First let's import the `highlight.js`.

```javascript
import Script from "next/script";
import hljs from "highlight.js/lib/core";

const post = ({ post }) => {
  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};
```

## Enabling various language support

Now let's import various languages highlighting support

```javascript
import Script from "next/script";

// Importing libraries
import hljs from "highlight.js/lib/core";

// Importing languages
import sql from "highlight.js/lib/languages/sql";
import javascript from "highlight.js/lib/languages/javascript";
import c from "highlight.js/lib/languages/c";
import css from "highlight.js/lib/languages/css";
import scss from "highlight.js/lib/languages/scss";
import shell from "highlight.js/lib/languages/shell";
import python from "highlight.js/lib/languages/python";
import powershell from "highlight.js/lib/languages/powershell";
import cpp from "highlight.js/lib/languages/cpp";
import php from "highlight.js/lib/languages/php";
import phpTemplate from "highlight.js/lib/languages/php-template";
import xml from "highlight.js/lib/languages/xml";

const post = ({ post }) => {
  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};
```

Here I have import most common languages but you can find more languages in the list.
![other lang](https://i.imgur.com/seii9ZV.gif)

## Registering languages for highlighting

Now we register these languages. We'll need to `useEffect()` to register these language onReady.

```javascript
import Script from "next/script";

// Importing useEffect
import { useEffect } from "react";

import hljs from "highlight.js/lib/core";

import sql from "highlight.js/lib/languages/sql";
import javascript from "highlight.js/lib/languages/javascript";
import c from "highlight.js/lib/languages/c";
import css from "highlight.js/lib/languages/css";
import scss from "highlight.js/lib/languages/scss";
import shell from "highlight.js/lib/languages/shell";
import python from "highlight.js/lib/languages/python";
import powershell from "highlight.js/lib/languages/powershell";
import cpp from "highlight.js/lib/languages/cpp";
import php from "highlight.js/lib/languages/php";
import phpTemplate from "highlight.js/lib/languages/php-template";
import xml from "highlight.js/lib/languages/xml";

const post = ({ post }) => {
  // Registering languages
  useEffect(() => {
    hljs.registerLanguage("sql", sql);
    hljs.registerLanguage("javascript", javascript);
    hljs.registerLanguage("python", python);
    hljs.registerLanguage("c", c);
    hljs.registerLanguage("cpp", cpp);
    hljs.registerLanguage("powershell", powershell);
    hljs.registerLanguage("shell", shell);
    hljs.registerLanguage("scss", scss);
    hljs.registerLanguage("css", css);
    hljs.registerLanguage("php", php);
    hljs.registerLanguage("php-template", phpTemplate);
    hljs.registerLanguage("html", xml);
    hljs.registerLanguage("xml", xml);
  });

  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};
```

## Final step

We have successfully registered all the languages now final step is to highlight the code. for that we'll be using `highlightAll()` function from the `hljs` means `Highlight.Js`

We'll be wrapping the `highlightAll()` function inside `useEffect()` so that it highlight only when window is loaded.

`[slug].js`

```javascript
useEffect(() => {
  hljs.highlightAll({ detectLanguage: true });
});
```

And that's it! Our final code should look like this

```javascript
import Script from "next/script";

// Importing useEffect
import { useEffect } from "react";

import hljs from "highlight.js/lib/core";

import sql from "highlight.js/lib/languages/sql";
import javascript from "highlight.js/lib/languages/javascript";
import c from "highlight.js/lib/languages/c";
import css from "highlight.js/lib/languages/css";
import scss from "highlight.js/lib/languages/scss";
import shell from "highlight.js/lib/languages/shell";
import python from "highlight.js/lib/languages/python";
import powershell from "highlight.js/lib/languages/powershell";
import cpp from "highlight.js/lib/languages/cpp";
import php from "highlight.js/lib/languages/php";
import phpTemplate from "highlight.js/lib/languages/php-template";
import xml from "highlight.js/lib/languages/xml";

const post = ({ post }) => {
  // Registering languages
  useEffect(() => {
    hljs.registerLanguage("sql", sql);
    hljs.registerLanguage("javascript", javascript);
    hljs.registerLanguage("python", python);
    hljs.registerLanguage("c", c);
    hljs.registerLanguage("cpp", cpp);
    hljs.registerLanguage("powershell", powershell);
    hljs.registerLanguage("shell", shell);
    hljs.registerLanguage("scss", scss);
    hljs.registerLanguage("css", css);
    hljs.registerLanguage("php", php);
    hljs.registerLanguage("php-template", phpTemplate);
    hljs.registerLanguage("html", xml);
    hljs.registerLanguage("xml", xml);
  });

  useEffect(() => {
    hljs.highlightAll({ detectLanguage: true });
  });

  return (
    <>
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></Script>
      {/* Import highlight js */}
      <div>{/* Post content goes here */}</div>
    </>
  );
};

export default post;
```

## Wrapping up

So that was it for this blog. If you get any issues or need any help feel free to post comment or reaching me on [LinkedIn](https://www.linkedin.com/in/preet-suthar-41b460243/) or [Mail](mailto:contact@preetsuthar.me)

Thank you for reading! I Preet Suthar sign out here!
]]></description>
        </item>
        <item>
            <title><![CDATA[Create a full-screen navbar in your website [Responsive]]]></title>
            <link>https://preetsuthar.me/posts/create-a-full-screen-navbar-in-your-website-responsive</link>
            <guid>https://preetsuthar.me/posts/create-a-full-screen-navbar-in-your-website-responsive</guid>
            <pubDate>Wed, 16 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Introduction

Creating a default navbar in a website using HTML and CSS is pretty basic. We can improve the UI by creating something called full screen navbar, where when the user clicks on the navbar dropdown button it opens the full page navbar which looks so awesome!

![preview](https://github-production-user-asset-6210df.s3.amazonaws.com/75468116/261015530-be54d108-5591-4bdf-9474-2ce44b0298e0.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230816%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230816T133205Z&X-Amz-Expires=300&X-Amz-Signature=3d6c0ba49d0e9fb1685062257e613371b571fda427ef0aa7a428020b4343143f&X-Amz-SignedHeaders=host&actor_id=75468116&key_id=0&repo_id=676061621)

let's get started!

## Prerequisite

- Basic knowledge about CSS & HTML and you're good to go!

## Coding time

First of all, let's create base files

`index.html`
`style.css`

Heading over to the skeleton first,

`index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Full screen navbar</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <nav>
      <div class="navbar">
        <div class="nav-items">
          <ul>
            <li>home</li>
            <li id="fullScreenNavbarTrigger">Links</li>
          </ul>
        </div>
        <div id="fullScreenNavbar" class="nav-full-items">
          <button onclick="closeNav()" id="closeFullScreenNavbar">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              fill="#000"
              class="bi bi-x-lg"
              viewBox="0 0 16 16"
            >
              <path
                d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"
              />
            </svg>
          </button>
          <a href="#">Home üè†</a>
          <a href="#about">About ‚ùì</a>
          <a href="#blogs">Blogs üìú</a>
          <a href="#contact">Contact üìß</a>
        </div>
      </div>
    </nav>
  </body>
</html>
```

Here we created the basic structure for the navbar now let's implement some styling,

`style.css`

```css
@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,900&display=swap");
* {
  margin: 0;
  padding: 0;
  font-family: "Poppins", sans-serif;
  scroll-behavior: smooth;
}

a {
  color: red;
  text-decoration: none;
}

.navbar {
  display: flex;
  justify-content: center;
}

.nav-items {
  position: fixed;
  display: flex;
  top: 2rem;
}

.nav-items ul {
  display: flex;
  justify-content: center;
  padding: 0.4rem 1rem;
  width: fit-content;
  margin: 0 1rem;
  border-radius: 30rem;
  backdrop-filter: blur(5px);
  gap: 2rem;
  background-color: #ffffff21;
  border: 2px solid #ccc;
  list-style: none;
}

.nav-full-items {
  position: fixed; /*Fixed position so it doesn't scroll*/
  display: none; /*Initial display none Later we'll add display:flex via javascript*/
  justify-content: center;
  align-items: center;
  height: 100vh; /*Make the navbar full page*/
  width: 100vw; /*Make the navbar full page*/
  backdrop-filter: blur(15px);
  background-color: #ffffff47;
  flex-direction: column;
  font-size: 2rem;
}

.nav-full-items a {
  color: #010101;
  text-decoration: none;
}

#closeFullScreenNavbar {
  position: absolute;
  top: 17px;
  right: 50px;
  background-color: transparent;
  color: #2a2a2a;
  border: none;
  font-size: 2rem;
  cursor: pointer;
  transition: 0.4s all ease-in-out;
}

#fullScreenNavbarTrigger {
  background-color: transparent;
  border: none;
  cursor: pointer;
}
```

Okay, there we go simple navbar styling is done!

![image](https://github-production-user-asset-6210df.s3.amazonaws.com/75468116/261016815-fbf96d8b-ef0b-4465-b4a3-9608bbe9ab8c.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230816%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230816T133255Z&X-Amz-Expires=300&X-Amz-Signature=6cea28d1d4ec434c642e4e52b8bd3e5f0719804377033d07c6a56cee3d01cd5f&X-Amz-SignedHeaders=host&actor_id=75468116&key_id=0&repo_id=676061621)

Now the logic part let's implement Javascript to make this functional!

write this code before the body closing tag in `index.html` or you can create a separate file for it named `script.js` and import it in html via

```html
<script src="path/to/script.js"></script>
```

The main logic for full-page navbar

```javascript
const fullScreenNavbar = document.getElementById("fullScreenNavbar");
const closeFullScreenNavbar = document.getElementById("closeFullScreenNavbar");
const fullScreenNavbarTrigger = document.getElementById(
  "fullScreenNavbarTrigger"
);

fullScreenNavbar.addEventListener("click", closeNav); // When user clicks it closes the navbar

function openNav() {
  fullScreenNavbar.style.display = "flex"; // Set the navbar to display:flex;
}

function closeNav() {
  fullScreenNavbar.style.display = "none"; // To close set the display:none; again
}
```

Now to make the buttons work we have to add onClick properties in buttons in `index.html`

```html
<div class="nav-items">
  <ul>
    <li>home</li>
    <li id="fullScreenNavbarTrigger" onclick="openNav()">Links</li>
  </ul>
</div>

<!-- In this block of code in navbar, we called openNav() function from javascript to open the navbar whenever the user click on Links -->

<div id="fullScreenNavbar" class="nav-full-items">
  <button onclick="closeNav()" id="closeFullScreenNavbar">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      fill="#000"
      class="bi bi-x-lg"
      viewBox="0 0 16 16"
    >
      <path
        d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"
      />
    </svg>
  </button>
  <a href="#">Home üè†</a>
  <a href="#about">About ‚ùì</a>
  <a href="#blogs">Blogs üìú</a>
  <a href="#contact">Contact üìß</a>
</div>

<!-- And here when the user clicks on the cross svg in opened nav menu it closes the menu calling the function closeNav()  -->
```

## It's done

So yeah that was it for this much now we can add extras to out website like the main heading and other styles whatever you want

## Extra

Let's add the main heading and sort about me below there with a few social links

```html
<section class="main-section">
  <div class="main-header"><h1>Hi, I'm Preetüëã</h1></div>
  <div class="main-about">
    <p>
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Aut, autem sit?
      Debitis, iure fuga sit omnis incidunt adipisci commodi unde.
    </p>
    <div>
      <a href="https://preetsuthar.me" target="_blank">üåê Devsite</a> |
      <span
        ><a href="https://github.com/preetsuthar17" target="_blank"
          >üê± github</a
        ></span
      >
    </div>
  </div>
</section>
```

Also, let's add some styling here,

`stlye.css`

```css
.main-section {
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  height: 40rem;
  flex-direction: column;
  z-index: 2;
  width: 96%;
  margin-inline: auto;
}

.main-header {
  font-size: 2.2rem;
  margin: 1rem;
}

.main-header h1 {
  font-weight: 900;
}

.main-about {
  font-weight: 500;
  font-size: 0.8rem;
}
```

We're done additionally you can add other components and pages like about me, projects etc..

![image](https://github-production-user-asset-6210df.s3.amazonaws.com/75468116/261019634-c7a3e677-8feb-4dae-9b9c-fe8fe4a42b00.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230816%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230816T133310Z&X-Amz-Expires=300&X-Amz-Signature=a32d0f343de91395594bc0557ae785975841bdc7bf60477dd7e704f673e9f5a6&X-Amz-SignedHeaders=host&actor_id=75468116&key_id=0&repo_id=676061621)

> Consider checking out üëâ [üåê Devsite](https://preetsuthar.me) | [üê± Github](https://github.com/preetsuthar17)

That's it for this blog! Thanks for reading, I Preet Suthar sign out here!
]]></description>
        </item>
        <item>
            <title><![CDATA[Create a Sticky Element using only CSS]]></title>
            <link>https://preetsuthar.me/posts/create-a-sticky-element-using-only-css</link>
            <guid>https://preetsuthar.me/posts/create-a-sticky-element-using-only-css</guid>
            <pubDate>Sat, 28 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[
Hey there, web developers! Want to make an element on your website stick to the top of the screen as users scroll down? Well, you're in luck! With just a few lines of CSS, you can create a fantastic sticky element effect. Let's dive right into it! üöÄüíª

## Sticky Element

```css
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
}
```

An element with `position: sticky;` is the key to creating our sticky magic! This style positions the element based on the user's scroll position.

As the user scrolls down, the sticky element behaves as `relative` until it reaches a certain offset position in the viewport. At that point, it "sticks" in place just like `position: fixed;`, keeping it visible even as the rest of the content scrolls.

**Important Note:** While `position: sticky;` is well-supported in modern browsers, be aware that Internet Explorer and Edge 15 (and earlier versions) do not support sticky positioning. Fear not, though! For Safari compatibility, you'll need to add the `-webkit-` prefix (as shown in the example above). Also, remember that you must specify at least one of `top`, `right`, `bottom`, or `left` for the sticky positioning to work correctly.

And that's it! You now have a sticky element that'll enhance your website's user experience. üåü
]]></description>
        </item>
        <item>
            <title><![CDATA[Create Responsive images using only css]]></title>
            <link>https://preetsuthar.me/posts/create-responsive-images-using-only-css</link>
            <guid>https://preetsuthar.me/posts/create-responsive-images-using-only-css</guid>
            <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
By adding `100%` max-width and adding `auto` height we can make image resize automatically according to the width of the device.

![Demo](https://i.imgur.com/405PHLw.gif)

```css
img {
  max-width: 100%;
  height: auto;
}
```
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating Gradient text only using CSS]]></title>
            <link>https://preetsuthar.me/posts/creating-gradient-text-using-only-css</link>
            <guid>https://preetsuthar.me/posts/creating-gradient-text-using-only-css</guid>
            <pubDate>Wed, 31 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
To create gradient text using only css we can use `background-clip` property in css.

```css
h1 {
  background: -webkit-linear-gradient(blue, blueviolet);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
```

<p class="codepen" data-height="494.9090881347656" data-default-tab="result" data-slug-hash="qBvxwyy" data-user="preetsuthar17" style="height: 494.9090881347656px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/preetsuthar17/pen/qBvxwyy">
  Creating gradient text</a> by Preet Suthar (<a href="https://codepen.io/preetsuthar17">@preetsuthar17</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Creating sections inside html select tag]]></title>
            <link>https://preetsuthar.me/posts/creating-sections-inside-html-select</link>
            <guid>https://preetsuthar.me/posts/creating-sections-inside-html-select</guid>
            <pubDate>Tue, 30 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
To create section inside `select` tag we can use `hr` tag in between options.

```html
<h1>Selector</h1>

<select>
  <option>HTML</option>
  <option>CSS</option>
  <option>Javascript</option>
  <!-- Using <hr/> to separate sections -->
  <hr />
  <option>ReactJs</option>
  <option>NextJs</option>
  <option>Angular</option>
</select>
```

<p class="codepen" data-height="540.7272644042969" data-default-tab="result" data-slug-hash="wvOyGMJ" data-user="preetsuthar17" style="height: 540.7272644042969px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/preetsuthar17/pen/wvOyGMJ">
  Dividing options in select tag</a> by Preet Suthar (<a href="https://codepen.io/preetsuthar17">@preetsuthar17</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Custom cursor in Next Js]]></title>
            <link>https://preetsuthar.me/posts/custom-cursor-in-next-js</link>
            <guid>https://preetsuthar.me/posts/custom-cursor-in-next-js</guid>
            <pubDate>Sun, 06 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
Creating a custom cursor in next js website is as easy as creating a component in next js. we can create a cursor component and then import it in `_app.js` to make it globally accessible.

![Custom cursor](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcoaw3ccq6yz2byynvbk.png)

## Files üìÇ

We we'll need to create two files or maybe just one.

- `FlareCursor.js` (Main custom cursor component)
- `style.css` (It could be your own style file)
- `_app.js` (It is prebuilt file in next js)

Let's get started!

## Coding time üöÄ

First of all let's create the main component,

`FlareCursor.js`

```js
import React, { useState, useEffect } from "react";

// This functional component represents a custom cursor with a flare effect.
function FlareCursor() {
  // State to track the current cursor position (x, y coordinates).
  const [position, setPosition] = useState({ x: 0, y: 0 });

  // State to track whether the cursor is over a clickable element.
  const [isPointer, setIsPointer] = useState(false);

  // Event handler for the mousemove event.
  const handleMouseMove = (e) => {
    // Update the cursor position based on the mouse coordinates.
    setPosition({ x: e.clientX, y: e.clientY });

    // Get the target element that the cursor is currently over.
    const target = e.target;

    // Check if the cursor is over a clickable element by inspecting the cursor style.
    setIsPointer(
      window.getComputedStyle(target).getPropertyValue("cursor") === "pointer"
    );
  };

  // Set up an effect to add and remove the mousemove event listener.
  useEffect(() => {
    window.addEventListener("mousemove", handleMouseMove);
    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, []); // The empty dependency array ensures that this effect runs only once on mount.

  // Calculate the size of the flare based on whether the cursor is over a clickable element.
  const flareSize = isPointer ? 0 : 30;

  // Adjust the cursor position to create a visual effect when over a clickable element.
  const cursorStyle = isPointer ? { left: "-100px", top: "-100px" } : {};

  // Render the custom cursor element with dynamic styles based on cursor state.
  return (
    <div
      className={`flare ${isPointer ? "pointer" : ""}`}
      style={{
        ...cursorStyle,
        left: `${position.x}px`,
        top: `${position.y}px`,
        width: `${flareSize}px`,
        height: `${flareSize}px`,
      }}
    ></div>
  );
}

// Export the FlareCursor component to be used in other parts of the application.
export default FlareCursor;
```

We have successfully created the custom cursor component, now let's style it.

`style.css`

```css
.flare {
  position: fixed;
  border: 2px solid #ffffff2b;
  border-radius: 50%;
  mix-blend-mode: screen;
  pointer-events: none;
  transform: translate(-50%, -50%);
  z-index: 999999 !important ;
  backdrop-filter: blur(1px);
  background-color: #0000005e;
  transition: width 0.2s ease-in-out, height 0.2s ease-in-out;
  cursor: none !important; /* Let's hide the default cursor so it looks way better */
}

/* We need to remove this custom cursor in mobile devices */
@media screen and (max-width: 768px) {
  .flare {
    width: 0;
    height: 0;
    transition: width 0.2s ease-in-out, height 0.2s ease-in-out,
      opacity 0.2s ease-in-out;
  }
}
.flare.pointer {
  opacity: 0 !important;
  transition: width 0.2s ease-in-out, height 0.2s ease-in-out,
    opacity 0.2s ease-in-out;
}
```

So we have successfully created and styled our component now let's head over to the `_app.js` to import it all.

`_app.js`

```jsx
import "../src/styles/globals.css"; // Make sure to change this path to your own css file path.

import FlareCursor from "../src/components/FlareCursor"; // Don't forget to update this path to your own component file.

// Now we can add the component in return () code should look like this.

return <Component {...pageProps} />;
```

Now before the `Component` add this code,

```js
<>
  <FlareCursor />
</>
```

And Tadaaa!! üéâ We're done now restart your dev server `npm run dev` and you should be good to go!
]]></description>
        </item>
        <item>
            <title><![CDATA[Font-size slider]]></title>
            <link>https://preetsuthar.me/posts/font-size-slider</link>
            <guid>https://preetsuthar.me/posts/font-size-slider</guid>
            <pubDate>Tue, 22 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Introduction

Here what I when i said font size font size slider? Well It basically means that we create a input with type of range and give it some magic of javascript to make that slider adjust the `font-size` property in CSS

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svp8h4dat2owq00t71zp.png)

[Live example](https://codepen.io/preetsuthar17/pen/BavyObj)

When we change value of slider it also changes value of font-size in css for the specified div.

## Let's get started

First of in your `index.html` file we write the structure code for slider and the the text of which we want the size to change when slider takes input.

`index.html`

```html
<div class="slider-container">
  <label for="font-size-slider">Adjust font Size</label>
  <input type="range" id="font-size-slider" min="20" max="40" value="20" />
</div>
<div class="display-text" id="display-text">
  Here what I when i said font size font size slider? Well It basically means
  that we create a input with type of range and give it some magic of javascript
  to make that slider adjust the `font-size` property in CSS
</div>
```

This is most basic code for Structure of slider and para. Here in the `<input>` we gave the type of input `range` so we get the slider and in attr we have min and max values and also we gave default value of slider which is 20, So whenever the page is opened that stays as default font size

Now let's give it bit of css to make everything in center,

`style.css`

```css
.slider-container {
  display: flex;
  padding-top: 3rem;
  justify-content: center;
  align-items: center;
}

.display-text {
  text-align: center;
  padding-top: 2rem;
}
```

Now it's time for magic of javaScript,

## Logic

Here is basic logic what we want is to get the value of slider and we want to give the slider value to font size value in CSS which means, `slider value == fontSize` correct? yeah. Now to do this let's fetch the value of slider first,

This is out `javascript` code

```javaScript
const fontSizeSlider = document.getElementById("font-size-slider");
const displayText = document.getElementById("display-text");
```

We target the slider by its ID we gave in HTML and we also target the text of which size we want to be changed

```html
<label for="font-size-slider">Adjust font Size</label>
<div class="display-text" id="display-text">
  Here what I when i said font size font size slider? Well It basically means
  that we create a input with type of range and give it some magic of javascript
  to make that slider adjust the `font-size` property in CSS
</div>
```

We got the element it self. Now to get the value of range slider we need to use `eventListener` in Javascript

```javascript
fontSizeSlider.addEventListener("input", () => {});
```

Here in this code we use an eventListener to check when the input slider has any change and if yes then we fetch the value of change in input slider,

```javascript
const fontSize = fontSizeSlider.value;
```

Now we got the value of range input. The last step is to set the value of slider as value of `FontSize` in CSS,

```javascript
displayText.style.fontSize = `${fontSize}px`;
```

And yeah here we are done! Your Javascript code should look something like this,

```javascript
const fontSizeSlider = document.getElementById("font-size-slider");
const displayText = document.getElementById("display-text");

fontSizeSlider.addEventListener("input", () => {
  const fontSize = fontSizeSlider.value;
  displayText.style.fontSize = `${fontSize}px`;
});
```

So that's how we easily created Font Size Adjusting slider using HTML and Javascript. We can also achieve this functionality in `React` but code will be different because we'll need to make use of `useSate` to set the font size and all. Let me know in the comments if you want the article for same functionality but using `reactjs`. That's for this article!

Thanks for reading!
]]></description>
        </item>
        <item>
            <title><![CDATA[Hide overflowing text with trails (...)]]></title>
            <link>https://preetsuthar.me/posts/hide-overflowing-text-with-trails</link>
            <guid>https://preetsuthar.me/posts/hide-overflowing-text-with-trails</guid>
            <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
We can use `text-overflow: ellipsis` to hide any overflowing text

![Demo](https://i.imgur.com/IpRLe5m.gif)

```css
p {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
```
]]></description>
        </item>
        <item>
            <title><![CDATA[HTML Cheatsheet for Beginners]]></title>
            <link>https://preetsuthar.me/posts/html-cheatsheet-for-beginners</link>
            <guid>https://preetsuthar.me/posts/html-cheatsheet-for-beginners</guid>
            <pubDate>Wed, 01 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[
Hey there, aspiring web developers! Starting out with HTML and looking for a handy cheatsheet to reference? Look no further! Below is a comprehensive guide to some essential HTML tags and elements that will help you build the foundation of your web pages. Let's get started! üöÄüíª

## Structure

This is the standard HTML boilerplate code to kickstart your web project:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Document</title>
  </head>
  <body></body>
</html>
```

## Headings

HTML provides six levels of headings, from h1 (largest) to h6 (smallest):

```html
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
```

## Container

Container tags are used to group content. Commonly used container tags are:

```html
<div>This is a div block</div>
<span>This is a span block</span>
<p>This is a paragraph</p>
<pre>Hello World</pre>
<code>import python</code>
```

## Text Formatting

Use text formatting tags to emphasize or style text:

```html
<b>I'm bold text</b>
<strong>I'm important text</strong>
<i>I'm italic text</i>
<em>Emphasized text</em>
<sub>Subscript</sub>
<sup>Superscript</sup>
```

## Lists

Create ordered and unordered lists:

```html
<ol>
  <li>Data 1</li>
  <li>Data 2</li>
  <li>Data 3</li>
</ol>

<ul>
  <li>Your Data</li>
  <li>Your Data</li>
</ul>
```

## Media

Embed images, audio, and video into your web page:

```html
<audio controls>
  <source src="demo.mp3" type="audio/mpeg" />
  Your browser does not support the audio element.
</audio>

<img src="Source_of_image" alt="Alternate text" />

<video width="480" height="320" controls>
  <source src="demo_move.mp4" type="video/mp4" />
  Your browser does not support the video tag.
</video>
```

## Table

Present data in a tabular format:

```html
<table>
  <caption>
    Demo Table
  </caption>
  <thead>
    <tr>
      <th>Column1</th>
      <th colspan="2">Column2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Data1</td>
      <td>Data2</td>
      <td>Data2</td>
    </tr>
    <tr>
      <td>Data1</td>
      <td>Data2</td>
      <td>Data2</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>&nbsp;</td>
      <td>Data</td>
      <td>Data</td>
    </tr>
  </tfoot>
</table>
```

## Links

Create hyperlinks to navigate between pages:

```html
<a href="https://preetsuthar.me/">Visit preetsuthar portfolio!</a>
```

## Form

Capture user input using HTML forms:

```html
<form action="/action.php" method="post">
  Name: <input name="name" type="text" /> <br />
  Age: <input max="90" min="1" name="age" step="1" type="number" value="18" />
  <br />
  <select name="gender">
    <option selected="selected" value="male">Male</option>
    <option value="female">Female</option></select
  ><br />
  <input checked="checked" name="newsletter" type="radio" value="daily" /> Daily
  <input name="newsletter" type="radio" value="weekly" /> Weekly<br />
  <textarea cols="20" name="comments" rows="5">Comment</textarea><br />
  <label
    ><input name="terms" type="checkbox" value="tandc" />Accept terms</label
  >
  <br />
  <input type="submit" value="Submit" />
</form>
```

## Characters & Symbols

Display special characters using HTML entities:

```html
&copy;
<!-- Copyright Symbol (¬©) -->
&lt;
<!-- Less than (<) -->
&gt;
<!-- Greater than (>) -->
&amp;
<!-- Ampersand (&) -->
&dollar;
<!-- Dollar ($) -->
```

## Random Text

Use random text to test your layouts:

```html
Elon Musk is an entrepreneur and business magnate. He is the founder, CEO, and
Chief Engineer at SpaceX; CEO and Product Architect of Tesla, Inc.; founder of
The Boring Company; and co-founder of Neuralink and OpenAI. A centibillionaire,
Musk is one of the richest people in the world.
```

## Semantic Elements

Use semantic elements for better HTML structure:

```html
<section>This is a section</section>
<article>Enter your data here</article>
<aside>Your data</aside>
```

There you have it, a handy HTML cheatsheet to assist you on your web development journey! Keep practicing and building amazing things with HTML.üéâüíªüî•
]]></description>
        </item>
        <item>
            <title><![CDATA[@keyframes - CSS Animation]]></title>
            <link>https://preetsuthar.me/posts/keyframes---css-animation</link>
            <guid>https://preetsuthar.me/posts/keyframes---css-animation</guid>
            <pubDate>Thu, 24 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
Animations are pretty cool, aren't they? yes, they are, but you might think adding
animations to the website is complex and challenging. But what if I say you can add
some pretty cool animation using CSS?

## Let's get started

We can add animation to our website using CSS `@keyframes` it's just as easy as writing normal CSS. In CSS using the `animation` property we can add some basic animations to Div or to any text.

## Syntax

We can use the `animation` property in CSS.

```css
.container {
  animation: time identifier animation_style;
}

@keyframes identifier {
  /* Keyframes */
}
```

You see in CSS we can add animation frame by frame which is pretty cool and you can do so much just with `@keyframes` in CSS. Let's see an example.

## Example

Let's assume we have div in html with class `container`.

```html
<div class="container"></div>
```

Here we are trying to create animation that automatically changes color frame by frame.

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdg3mfhq3pomvxgn2ye5.gif)

Let's write our CSS now!

```css
.container {
  background-color: red;
  animation: 3s changeColor infinite;
}

@keyframes changeColor {
  0% {
    background-color: red;
  }
  50% {
    background-color: yellow;
  }

  70% {
    background-color: green;
  }
  100% {
    background-color: red;
  }
}
```

## Explaination

Let's understand the code a bit more. Here we had a div with a class name of `container` we used `.continer` in the CSS file to target the specific.

Now to the div, we added the CSS `animation` property,

```
animation: 3s changeColor infinite;
```

And after adding the animation property we added `@keyframes` to animate the div.
Let's understand `@keyframes`.

In CSS `@keyframes` are used to give animation to the `animation` property. For the `@keyframes` identifier we use the same identifier we added in the `animation` property in CSS

```
animation: 3s changeColor infinite;

@keyframes changeColor{
  /**Same name as identifier in animation property. */
}
```

Let's divide the `@keyframes`

```
@keyframes changeColor {
  0% {
    background-color: red;
  }
  50% {`
    background-color: yellow;
  }

  70% {
    background-color: green;
  }
  100% {
    background-color: red;
  }
```

Now as you can we provided some frames like `0%`, `10%` etc. Now it represents the framing of animation. Here what I mean is when animation just started the frame will be `0%` when animation is finished half the frames will be `50%` when animation is finished the frames will be `100%`.

So basically in this block of `@keyframes` code, we added some frames like when the animation frame is `0%` background-color of `.container` will be red. just like that, we change the color according to the frames.

When the animation is running it will look something like this,

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdg3mfhq3pomvxgn2ye5.gif)

So yeah that's the most basic of `@keyframes` and CSS animations.

## Animation Delay property

CSS animation has some more properties like,

`animation-delay`: The value/Time provided in this property will delay the animation by that value/time

> If we add `animation-delay: 1s;` then the animation will run after `1 second`

So yeah CSS animation still has more properties to learn but we'll end this basics article here. Thank you for reading!
]]></description>
        </item>
        <item>
            <title><![CDATA[@media screens - CSS]]></title>
            <link>https://preetsuthar.me/posts/media-screens---css</link>
            <guid>https://preetsuthar.me/posts/media-screens---css</guid>
            <pubDate>Mon, 21 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Introduction

While creating website you need to make sure that your website is responsive and works well in every device with any width. Using @media screens makes your website responsive and helps your website to be more efficient and allows the website to list in SEO higher rank.

In this blog post we'll cover up basic fundamentals about @meda queries in CSS so let's get started!

## Understanding @media

Let's understand the @media in CSS. Well this allows developers to specify specific component for specific defined width. Let us say we want `<div class="container">Hello there üëã!</div>` to have background color when device is mobile (I know it makes no sense but still) we want <div> to have background color when the user opens website in mobile phone so we use the @media to specify the width, how much width it should be to apply the background color property to `.container`. Let's see the syntax for @media and then we'll se example.

## Syntax

### Display width

```css
@media screen and (max-width: 768px) {
  /* Styles here for the device with width of 768px */
}
```

In this @media we defined that if the width is less than 768px than the code inside @media will execute. We provided maximum width for the device to apply the style inside @media.

> When width is less than 768px

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wule7yddduhqykbg0ut.png)

> When width is greater than or equal to 768px

![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a131s58aymhf0ysl7kg8.png)

### Display height

Just like width we can also use the @media for height of the display

```css
@media (height > 600px) {
  body {
    line-height: 1.4;
  }
}
```

> Check out the codepen example [here](https://codepen.io/preetsuthar17/pen/bGONYgm)

![compatibility](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maz8vnurvoaaeccl5gn6.png)

So yeah that's the most basics about @media screens in css if you have any query feel free to ask in comment, Thank you for reading!
]]></description>
        </item>
        <item>
            <title><![CDATA[My Tech and Gear: A Daily Companion]]></title>
            <link>https://preetsuthar.me/posts/my-tech-and-gear-a-daily-companion</link>
            <guid>https://preetsuthar.me/posts/my-tech-and-gear-a-daily-companion</guid>
            <pubDate>Tue, 28 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[
Hello there! As a fellow techie, I understand the importance of having the right tools and gear to fuel our daily endeavors. Below is a list of my trusted tech and gear that I use on a daily basis to conquer the digital realm! Let's dive right in! üíªüîß

### Laptop Specs üöÄ

- **Model**: Asus TUF A15
- **RAM**: 16GB
- **CPU**: AMD Ryzen 7 6800H with Radeon Graphics
- **GPU**: NVIDIA GeForce RTX 3050 Ti
- **OS**: Windows + WSL (Ubuntu)

### Coding üíª

- **Editor**: [Visual Studio Code](https://code.visualstudio.com/)
- **Terminal**: [Windows Terminal](https://github.com/microsoft/terminal)
- **Browsers**: [Brave](https://brave.com/), [Chrome](https://www.google.com/intl/en_in/chrome/), and [Firefox](https://www.mozilla.org/en-US/firefox/new/)
- **Environment**: [WSL2 (Ubuntu)](https://docs.microsoft.com/en-us/windows/wsl/install)

### Hosting üåê

- [Vercel](https://vercel.com/dashboard)
- [Netlify](https://Netlify.app)
- [Github Pages](https://pages.github.com/)
- [Cloudflare (For DNS)](https://www.cloudflare.com/en-gb/)

With these powerful tools at my disposal, I embark on coding adventures, web development quests, and digital explorations! üöÄüåç

Having the right tech and gear is essential to unlock our full potential and bring our ideas to life. So, whether it's crafting a website, diving into the command line, or hosting my projects for the world to see, these tools have become my trusty companions on this exciting journey of tech and creativity. üí°üéâ
]]></description>
        </item>
        <item>
            <title><![CDATA[Responsive Masonry Layout using only CSS]]></title>
            <link>https://preetsuthar.me/posts/responsive-masonry-layout-using-only-css</link>
            <guid>https://preetsuthar.me/posts/responsive-masonry-layout-using-only-css</guid>
            <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
## Introduction

First of all let's talk what is a masonry layout. Well Masonry means "craft of building a structure with brick, stone, or similar material" - According to google definition.

Well if you ask me I'll say creating responsive and beautiful layouts in HTML with different sizes of elements.

In this article we are going to create a Image Gallery website using masonry layout which will be pretty and responsive.

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz5k7dqncu0v5a97djlh.png)

## Let's get started

Before learning to create masonry layouts let's learn how to make images responsive using CSS only.

## Making images responsive

Let's assume we have image in our website,

```html
<img
  class="image"
  src="https://images.unsplash.com/photo-1693761935441-ad0ffad6905b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDF8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
/>
```

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nc2lohrj6hamh27o8pe.png)

Now to make this image responsive we have to use only two lines of css.

```css
img {
  max-width: 100%;
  height: auto;
}
```

just by using these two CSS lines we can make every image in our responsive. No matter what device width will get the `max-width` of image will always stay `100%` and we added `height: auto` so when width changes with device width it also updates the height by itself.

## Let's create masonry layout

It's time we create masonry layout. First of all let's add some images in our HTML

```html
<div class="image-gallery">
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1693761935441-ad0ffad6905b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDF8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1694009606218-eb46476e6300?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDR8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1693165074962-ae564d6b16ee?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDJ8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1693754079764-d90b63861dd3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDZ8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1693057205752-f7cabeaff629?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDl8NnNNVmpUTFNrZVF8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
  <div class="image-card">
    <img
      src="https://images.unsplash.com/photo-1693928626612-629e0b697ce1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHx0b3BpYy1mZWVkfDEyfDZzTVZqVExTa2VRfHxlbnwwfHx8fHw%3D&auto=format&fit=crop&w=500&q=60"
      alt="ShowCaseGallery"
    />
  </div>
</div>
```

Here I've added bunch of images from unsplash and all of them have different heights and widths.

Currently the images looks like this in straight line,

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcvcd8nfsdwuuwlip42y.png)

Now we want images to be in row and also we want them to update as the device width changes.

We want layout to look something like this,

![Preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnp2kpr8eotlbkaqkk4h.png)

So we'll define number of columns to display in page, Let's write some css to make things looks beautiful.

```css
/* Parent container of .image-card */
.image-gallery {
  columns: 3;
  column-gap: 16px;
  margin: 1rem;
}
```

So we defined `3 columns` on page and we also gave `column-gap: 16px` so that it looks cleaner with bit of space around every `.image-card` we also added `margin: 1rem` so add some spacing around the entire container.

Let's target our `.image-card` in CSS and minor CSS.

```css
.image-card {
  positive: relative;
  margin-bottom: 16px;
}
```

Our masonry layout is ready :D It's time to make it responsive with some `@media queries` Check out [this post](https://www.preetsuthar.me/posts/media-screens---css) to learn more about `@media queries`

```css
@media screen and (max-width: 1200px) {
  .image-gallery {
    columns: 3;
  }
}

@media screen and (max-width: 900px) {
  .image-gallery {
    columns: 2;
  }
}

@media screen and (max-width: 500px) {
  .image-gallery {
    columns: 1;
  }
}
```

And we're done!

![Small width preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19gb00c9wvawo9ikosvi.png)

![Small width preview](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwq0zrmoyr7s9kedxzvs.png)

## Wrapping up

Check out [this codepen demo](https://codepen.io/preetsuthar17/pen/GRPrepx).

It's is pretty basic to create masonry layout using only CSS and still you can spice it up by implementing Javascript and more feature.
]]></description>
        </item>
        <item>
            <title><![CDATA[Snapping sections on scroll only using CSS]]></title>
            <link>https://preetsuthar.me/posts/snapping-sections-on-scroll-only-using-css</link>
            <guid>https://preetsuthar.me/posts/snapping-sections-on-scroll-only-using-css</guid>
            <pubDate>Tue, 30 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[
By using CSS `scroll-snap-type` and `scroll-snap-align` properties we can create snapping sections on scroll.

```css
html,
body {
  overflow: hidden;
}

.sections {
  height: 100vh;
  overflow-y: scroll;
  snap-scroll-type: y mandatory;
}

.section {
  snap-scroll-align: start;
}
```

<p class="codepen" data-height="506.5454559326172" data-default-tab="result" data-slug-hash="KKEZOmN" data-user="preetsuthar17" style="height: 506.5454559326172px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/preetsuthar17/pen/KKEZOmN">
  Snapping Scroll</a> by Preet Suthar (<a href="https://codepen.io/preetsuthar17">@preetsuthar17</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Sticky navbar only using CSS]]></title>
            <link>https://preetsuthar.me/posts/sticky-navbar-only-using-css</link>
            <guid>https://preetsuthar.me/posts/sticky-navbar-only-using-css</guid>
            <pubDate>Sat, 05 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[
One effective technique to enhance navigation is by implementing a sticky navbar. A sticky navbar remains fixed at the top of the page as users scroll, providing easy access to important links and content. In this blog post, we'll delve into the process of creating a sticky navbar using HTML and CSS, with a focus on the `position: sticky` and `top: 0` properties.

## Understanding the sticky position Property

The `position: sticky` property is a powerful CSS attribute that blends the behaviors of both `position: relative` and `position: fixed`. It allows an element to behave as relatively positioned within its parent container until a certain threshold (usually defined by the viewport) is reached. Once this threshold is crossed during scrolling, the element becomes fixed to the specified position.

### HTML Structure

Before we dive into the CSS, let's set up the HTML structure for our sticky navbar:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Meta tags, title, and link to CSS -->
  </head>
  <body>
    <header class="sticky-header">
      <nav>
        <ul>
          <li><a href="#">Home</a></li>
          <li><a href="#">About</a></li>
          <li><a href="#">Services</a></li>
          <li><a href="#">Portfolio</a></li>
          <li><a href="#">Contact</a></li>
        </ul>
      </nav>
    </header>
    <!-- Rest of the page content -->
  </body>
</html>
```

### Applying the CSS

Now, let's bring our sticky navbar to life using the `position: sticky` property and the `top: 0` value:

```css
body {
  margin: 0;
  font-family: Arial, sans-serif;
}

.sticky-header {
  background-color: #333;
  color: #fff;
  position: sticky; /* Apply the sticky positioning */
  top: 0; /* Stick the element to the top of the viewport */
  z-index: 100; /* Ensure the navbar is above other content */
}

.sticky-header nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
}

.sticky-header ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
}

.sticky-header li {
  margin-right: 20px;
}

.sticky-header a {
  text-decoration: none;
  color: #fff;
}
```

## Achieving a Smooth User Experience

Implementing a sticky navbar isn't just about sticking an element to the top. To create a smooth and engaging user experience, consider these additional tips:

1. **Responsive Design**: Ensure your sticky navbar is responsive and adapts gracefully to different screen sizes. Utilize CSS media queries to adjust styles as needed.

2. **Transition Effects**: Apply CSS transition effects to smoothly animate the transition from relative to fixed positioning. This enhances the visual appeal and professionalism of your navbar.

3. **Clear Design**: Keep the design of your navbar clean and easy to read. Clear typography and well-spaced navigation links contribute to a positive user experience.

4. **Testing and Feedback**: Test your sticky navbar across different browsers and devices to ensure consistent behavior. Consider gathering user feedback to make improvements.
]]></description>
        </item>
        <item>
            <title><![CDATA[Theme Toggler using Javascript, HTML, CSS]]></title>
            <link>https://preetsuthar.me/posts/theme-toggler-using-javascript-html-css</link>
            <guid>https://preetsuthar.me/posts/theme-toggler-using-javascript-html-css</guid>
            <pubDate>Mon, 06 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[
Hey there, fellow developers! Ever wanted to add a cool theme toggler to your website that lets users switch between a bright and vibrant light theme and a sleek and mysterious dark theme? Well, I've got great news for you! With just a few lines of Javascript code, we can make this happen. Let's dive into the exciting world of **coding**! üöÄüíª

### Step 1Ô∏è‚É£: Adding HTML

```html
<!-- Time to write some html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>üåûüåö Light & Dark Theme Toggler üåûüåö</title>
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div id="container" class="container theme">
      <h2>Hello World! üëã</h2>
      <p>
        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Cumque veniam
        delectus corporis. Quasi nemo natus doloribus sed ipsam eius cupiditate
        pariatur eaque nesciunt veniam error, sint adipisci iste voluptatibus
        quos cum alias qui! Hic adipisci sunt ab reprehenderit, eaque deleniti
        dolorum nobis dicta officia eius animi pariatur dignissimos suscipit
        architecto iusto molestias odio autem. Aliquam quasi reprehenderit
        officia voluptate mollitia. At ipsum quae placeat.
      </p>
      <button onclick="themeToggle()">Switch Theme üåì</button>
      <!--Theme toggle function which we are gonna create soon-->
    </div>
    <script src="./js/app.js"></script>

    <!--Link javascript file into the main index.html file-->
  </body>
</html>
```

Next, let's sprinkle some magic with CSS to style the page! üíÖ‚ú®

### Step 2Ô∏è‚É£: Adding CSS

```css
@import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "poppins", sans-serif;
}

.theme {
  transition: all 300ms linear;
  background-color: rgb(22, 22, 22);
  color: rgb(214, 214, 214);
}

.container {
  font-size: 1.3rem;
  display: flex;
  text-align: center;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  flex-direction: column;
}

.container h1 {
  font-size: 3rem;
}

.container p {
  padding-top: 10px;
  padding-left: 20px;
  padding-right: 20px;
  padding-bottom: 10px;
}

.container button {
  font-size: 1.4rem;
  padding-top: 10px;
  padding-bottom: 10px;
  padding-right: 20px;
  padding-left: 20px;
  border: none;
  background-color: #757ff8;
  color: white;
  border-radius: 3rem;
  cursor: pointer;
}
```

You don't need any brief tutorial for CSS stuff as I've just aligned everything in the center. If you need help, you can check out [this blog post](https://preetsuthar.me/posts/div-centering-css) for a brief tutorial on how to align things in the center.

Finally, it's time to add some **Javascript** magic to the mix! üéâüîÆ

```js
const container = document.getElementById("container");
// Define the main container or div with an id to get a reference to that code.

function themeToggle() {
  container.classList.toggle("theme");
}
```

And voil√†, we're done! That was really easy, right? üòé However, if you want to explore more advanced Javascript techniques, you can always dive deeper. But for now, this simple approach should do the trick!
]]></description>
        </item>
    </channel>
</rss>